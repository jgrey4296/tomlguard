[project]
name            = "tomlguard"
version         = "0.4.0"
description     = ""
readme          = "README.md"
requires-python = ">=3.10"
license         = {file = "LICENSE"}
keywords        = ["toml"]
authors         = [
  {email = "jgrey.n.plus.one@gmail.com"},
  {name  = "John Grey"}
]
classifiers     = [
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Development Status :: 3 - Alpha",
  "Topic :: Utilities",
]

##-- dependencies
dependencies   = [
    "toml; python_version<'3.11'",
     "tomli-w",
]

[project.optional-dependencies]
test = [
     "pytest > 7.0.0",
     "pytest-mock",
]

##-- end dependencies

##-- urls
[project.urls]
homepage      = "https://github.com/jgrey4296/tomlguard"
documentation = "https://tomlguard.readthedocs.io/en/latest"
repository    = "https://github.com/jgrey4296/tomlguard"
changelog     = "https://github.com//jgrey4296/tomlguard/blob/master/CHANGELOG.md"

##-- end urls

##-- scripts
[project.scripts]

##-- end scripts

##-- build system
[build-system]
requires = [
         "setuptools >= 63.1.0",
         "wheel >= 0.37.1",
]

build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
namespaces = true
where      = ["."]
include    = ["tomlguard*"]

[tool.setuptools.package-data]
"*" = ["*"]

[tool.setuptools.exclude-package-data]

##-- end build system

# Tools #######################################################################

##-- pyright
[tool.pyright]
# strict = toml_config.*
verboseOutput               = true
typeCheckingMode            = "strict"
pythonVersion               = "3.10"

reportUnusedImport          = false
reportAssertAlwaysTrue      = "information"
reportMissingParameterType  = "warning"
reportMissingTypeArgument   = "warning"
reportMissingTypeStubs      = "warning"
reportUnknownMemberType     = "warning"
reportUnknownParameterType  = "information"
reportUnknownVariableType   = "warning"
reportUnnecessaryCast       = "information"
reportUnnecessaryIsInstance = "warning"

##-- end pyright

##-- pytest
[tool.pytest.ini_options]
log_cli       = false
log_level     = "DEBUG"
log_cli_level = "DEBUG"

##-- end pytest

##-- bumpver
[tool.bumpver]
current_version    = "0.4.0"
version_pattern    = "MAJOR.MINOR.PATCH"
commit_message     = "[bump]: version {old_version} -> {new_version}"
tag_message        = "{new_version}"
tag_scope          = "default"
# commit             = true
# tag                = true
# pre_commit_hook  = ""
# post_commit_hook = ""
# push             = true

[tool.bumpver.file_patterns]
"pyproject.toml"   = [
                   '^version\s+=\s+"{version}"',
                   '^current_version\s+=\s+"{version}"'
]
"tomlguard/__init__.py" = ['^__version__\s+:\s+Final\[str\]\s+=\s+"{version}"']

##-- end bumpver

##-- isort
# https://pycqa.github.io/isort/docs/configuration/config_files.html
[tool.isort]
color_output           = false
py_version             = 311
# profile                = "black"
comment_prefix         = "# "
sections               = [
"FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"
]
default_section        = "THIRDPARTY"
lines_after_imports    = -1
lines_between_sections = 1
lines_between_types    = 0

add_imports            = [
"from __future__ import annotations",
"import abc",
"import datetime",
"import enum",
"import functools as ftz",
"import itertools as itz",
"import logging as logmod",
"import pathlib as pl",
"import re",
"import types",
"import contextlib",
"import hashlib",
"import collections",
"from time import sleep",
"from copy import deepcopy",
"from dataclasses import InitVar, dataclass, field",
"from uuid import UUID, uuid1",
"from weakref import ref",
"from typing import (TYPE_CHECKING, Any, Callable, ClassVar, Final, Generic, Iterable, Iterator, Mapping, Match, MutableMapping, Protocol, Sequence, Tuple, TypeAlias, TypeGuard, TypeVar, cast, final, overload, runtime_checkable, Generator)",
"import atexit # for @atexit.register",
"import faulthandler",
]

import_heading_future      = "Imports:"
import_heading_stdlib      = "##-- stdlib imports"
import_heading_thirdparty  = "##-- 3rd party imports"
import_heading_firstparty  = "##-- 1st party imports"
import_heading_localfolder = ""

import_footer_future      = ""
import_footer_stdlib      = "##-- end stdlib imports"
import_footer_thirdparty  = "##-- end 3rd party imports"
import_footer_firstparty  = "##-- end 1st party imports"
import_footer_localfolder = ""


##-- end isort
